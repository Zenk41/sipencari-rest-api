openapi: "3.0.2"
info:
  title: Sipencari API
  version: "1.0"
servers:
  - url: https://test.sipencari.com/api/v1
    description: "Server for testing"
  - url: https://prod.sipencari.com/api/v1
    description: "Server Production"
  - url: http://localhost:8080/api/v1
tags:
  - name: Greetings
    description: Endpoint for Greets
  - name: Authentication
    description: Endpoint for Authentication
  - name: User - Profile
    description: Endpoint for Profile
  - name: User - Reset Password
    description: Endpoint for Reset Password
  - name: User - Setting
    description: Endpoint for Setting
  - name: User - Missing Post
    description: Endpoint for Missing Post
  - name: User - Comment
    description: Endpoint for Comment Missing Post
  - name: User - Like Missing Post
    description: Endpoint for Liking Missing Post
  - name: User - Like Comment
    description: Endpoint for Liking Comment
  - name: Admin - Missing Post
    description: Manage Missing Post(for admin & super admin calls only)
  - name: Admin - Comment
    description: Manage Comment(for admin & super admin calls only)
  - name: Admin - Like Missing
    description: Like & Unliking User Comment(for admin & super admin calls only)
  - name: Admin - Like Comment
    description: Like & Unliking User Comment(for admin & super admin calls only)
  - name: Admin - User
    description: Manage User(for admin & super admin calls only)
  - name: SuperAdmin - Admin
    description: Manage Admin(for super admin calls only)

paths:
  #Greets
  /:
    get:
      tags:
        - "Greetings"
      summary: Greets
      responses:
        "200":
          description: OK

  # Authentication
  /auth/register:
    post:
      tags:
        - "Authentication"
      summary: Registering User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: sutrisno agung
                email:
                  type: string
                  example: ardhidhani@gmail.com
                password:
                  type: string
                  example: inipassword
      responses:
        "200":
          description: OK

  /auth/login:
    post:
      summary: Requesting Access
      tags:
        - "Authentication"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: ardhidhani@gmail.com
                password:
                  type: string
                  example: inipassword
      responses:
        "200":
          description: OK

  # /auth/forgot-password:
  #   post:
  #     tags:
  #       - "Authentication"
  #     summary: Reset Password
  #     responses:
  #       "200":
  #         description: OK

  # /auth/refresh-token:
  #   post:
  #     security:
  #       - BearerAuth: []
  #       - RefreshAuth: []

  #     summary: Refreshing Access
  #     tags:
  #       - "Authentication"

  #     responses:
  #       "200":
  #         description: OK

  # User Profile
  /user/profile:
    get:
      security:
        - BearerAuth: []
      summary: Get My Profile
      tags:
        - "User - Profile"
      responses:
        "200":
          description: OK

  /user/profile/{user_id}:
    get:
      security:
        - BearerAuth: []
      summary: Get Other User Profile
      tags:
        - "User - Profile"
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: Numeric ID of the user to update the spesific user
      responses:
        "200":
          description: OK

  # User Setting
  /user/setting/update-data:
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Setting"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  example: diganti namanya
                email:
                  type: string
                  example: ardhidhani@gmail.com
      responses:
        "200":
          description: OK

  /user/setting/update-password:
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Setting"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  example: password lama
                new_password:
                  type: string
                  example: password baru
      responses:
        "200":
          description: OK

  /user/setting/update-picture:
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Setting"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - picture
              properties:
                picture:
                  type: string
                  format: binary
            encoding:
              picture:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: OK

  /user/setting/update-address:
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Setting"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
              properties:
                picture:
                  type: string
                  example: jl tugu
      responses:
        "200":
          description: OK

  # User Post
  /missing-posts/my-post:
    get:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK
    post:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK

  /missing-posts:
    post:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK

  /missing-posts/{missing-post-id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK
    delete:
      security:
        - BearerAuth: []
      tags:
        - "User - Missing Post"
      responses:
        "200":
          description: OK

  # User Comment Missing Post
  /missing-posts/{missing-post-id}/comments:
    post:
      security:
        - BearerAuth: []
      tags:
        - "User - Comment"
      responses:
        "200":
          description: OK
  /missing-posts/{missing-post-id}/comments/{comment_id}:
    put:
      security:
        - BearerAuth: []
      tags:
        - "User - Comment"
      responses:
        "200":
          description: OK
    delete:
      security:
        - BearerAuth: []
      tags:
        - "User - Comment"
      responses:
        "200":
          description: OK

  # User Like Missing Post
  /missing-posts/{missing-post-id}/likes:
    post:
      security:
        - BearerAuth: []
      tags:
        - "User - Like Missing Post"
      responses:
        "200":
          description: OK

  # User Like Comment
  /missing-posts/{missing-post-id}/comments/{comment-id}/likes:
    post:
      security:
        - BearerAuth: []
      tags:
        - "User - Like Comment"
      responses:
        "200":
          description: OK

  # deffault
  # /:
  #   get:
  #     responses:
  #       "200":
  #         description: OK

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token Required to access this endpoint
    RefreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Refresh Token required to access this endpoint
